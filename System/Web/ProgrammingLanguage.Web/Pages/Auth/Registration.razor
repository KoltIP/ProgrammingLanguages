@page "/registration"
@layout SimpleLayout

@using System.ComponentModel.DataAnnotations
@using ProgrammingLanguage.Web.Pages.Auth.Registr
@using ProgrammingLanguage.Web.Pages.Auth.Services

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<MudGrid Justify="Justify.Center" Class="pa-10">
    <MudItem xs="7" sm="4">
        <MudPaper Class="pa-4">           
                
                <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-3">Registration</MudText>

                <MudAlert Severity="Severity.Error" Class="@(ShowErrors ? "mb-3 d-block" : "d-none")">
                    @Error
                </MudAlert>

                <MudForm Model="model" @ref="form" Validation="@(modelValidator.ValidateValue)">
                    <MudTextField T="string"
                                    @bind-Value="model.Email" For="@(() => model.Email)"
                                    Label="Email" 
                                    Required="true" 
                                    RequiredError="Email is required!"
                                    Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                    <MudTextField @bind-Value="model.Name" For="@(() => model.Name)"
                                    Label="Name" 
                                    Required="true"
                                    RequiredError="Name is required!"/>
                    <MudTextField @bind-Value="model.Password" For="@(() => model.Password)"
                                    Label="Password" 
                                    InputType="@PasswordInput"
                                    Adornment="Adornment.End"
                                    AdornmentIcon="@PasswordInputIcon"
                                    Required="true"
                                    RequiredError="Password is required!"
                                    OnAdornmentClick="TogglePasswordVisibility" />


                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               ButtonType="ButtonType.Button"
                               OnClick="@((e) => Registr())">Registration</MudButton>
                </MudForm>   
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    MudForm form = default!;

    
    private RegistrModel model = new RegistrModel();

    RegistrModelValidator modelValidator = new RegistrModelValidator(); 

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private bool ShowErrors;
    private string? Error;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task Registr()
    {
        ShowErrors = false;
        Error = "";
        await form.Validate();
        var result = await AuthService.Registration(model);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }
}
